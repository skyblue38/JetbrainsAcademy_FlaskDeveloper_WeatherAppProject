type: edu
files:
- name: tests.py
  visible: false
  text: |
    from test.tests import FlaskProjectTest

    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import asyncio
    import os

    from hstest import FlaskTest, CheckResult, WrongAnswer
    from hstest import dynamic_test
    from hstest.dynamic.security.exit_handler import ExitHandler
    from pyppeteer import launch


    class FlaskProjectTest(FlaskTest):
        source = 'web.app'
        run_args = {
            "headless": False,
            "defaultViewport": None,
            "args": ['--start-maximized', '--disable-infobar'],
            "ignoreDefaultArgs": ['--enable-automation'],
        }

        async def launch_and_get_browser(self):
            try:
                return await launch(self.run_args)
            except Exception as error:
                raise WrongAnswer(str(error))

        async def close_browser(self, browser):
            try:
                await browser.close()
            except Exception as ex:
                print(ex)

        async def get_input_field(self, page):
            input_field = await page.querySelector('input#input-city')
            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")
            return input_field

        async def get_submit_button(self, page):
            button = await page.querySelector('button.submit-button')
            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")
            return button

        def generate(self):
            try:
                if os.path.exists('web/weather.db'):
                    os.remove('web/weather.db')
            except Exception as ignored:
                raise WrongAnswer(f"Looks like your 'weather.db' database file is blocked. "
                                  f"Stop your apps that connects to that database!")
            return []

        @classmethod
        async def check_cards_in_the_page(cls, page, cards_number):
            cards = await page.querySelectorAll('div.card')

            if len(cards) != cards_number:
                raise WrongAnswer(f"Found {len(cards)} <div> blocks with class 'card', but should be {cards_number}!")

            for card in cards:
                degrees = await card.querySelector('div.degrees')
                if degrees is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'degrees'")
                state = await card.querySelector('div.state')
                if state is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'state'")
                city = await card.querySelector('div.city')
                if city is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'city'")
                button = await card.querySelector('button.delete-button')
                if button is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain a button with class 'delete-button'")

        async def test_response_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            try:
                await page.goto(self.get_url())
            except Exception:
                raise WrongAnswer(f"Can't access the main page with URL '{self.get_url()}'")
            await self.close_browser(browser)

        @dynamic_test(order=1, time_limit=-1)
        def test_response(self):
            ExitHandler.revert_exit()
            asyncio.new_event_loop().run_until_complete(self.test_response_async())
            return CheckResult.correct()

        async def test_main_page_structure_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()

            await page.goto(self.get_url())

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            button = await self.get_submit_button(page)

            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")

            input_field = await self.get_input_field(page)

            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")

            await self.check_cards_in_the_page(page, 0)

            await self.close_browser(browser)

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_main_page_structure(self):
            asyncio.new_event_loop().run_until_complete(self.test_main_page_structure_async())
            return CheckResult.correct()

        async def test_add_city_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('London')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 1)

        @dynamic_test(order=3)
        def test_add_city(self):
            asyncio.new_event_loop().run_until_complete(self.test_add_city_async())
            return CheckResult.correct()

        async def test_city_name_after_adding_async(self):

            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Fairbanks')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 2)

        @dynamic_test(order=4)
        def test_city_name_after_adding(self):
            asyncio.new_event_loop().run_until_complete(self.test_city_name_after_adding_async())
            return CheckResult.correct()

        async def test_refresh_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Idaho')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 3)

            await page.reload()

            await self.check_cards_in_the_page(page, 3)

        @dynamic_test(order=5)
        def test_refresh(self):
            asyncio.new_event_loop().run_until_complete(self.test_refresh_async())
            return CheckResult.correct()

        async def test_flash_message_async(self):
            print(123123)
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Idaho')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            input_field = await self.get_input_field(page)
            await input_field.type('Idaho')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            html = await page.content()

            if 'The city has already been added to the list!' not in html:
                raise WrongAnswer(
                    f'If the user tires to add a city that is already was added you should print '
                    f'"The city has already been added to the list!"')

            input_field = await self.get_input_field(page)
            await input_field.type('The city that doesn\'t exist!')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            html = await page.content()

            if 'The city doesn\'t exist!' not in html:
                raise WrongAnswer(
                    f'If the user tires to add a city that is already was added you should print "The city doesn\'t exist!"')

        @dynamic_test(order=6)
        def test_flash_message(self):
            asyncio.new_event_loop().run_until_complete(self.test_flash_message_async())
            return CheckResult.correct()

        async def test_delete_card_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            await self.check_cards_in_the_page(page, 3)

            cards = await page.querySelectorAll('div.card')
            card = cards[0]
            delete_button = await card.querySelector('button.delete-button')

            await asyncio.gather(
                page.waitForNavigation(),
                delete_button.click(),
            )

            await self.check_cards_in_the_page(page, 2)

            cards = await page.querySelectorAll('div.card')
            card = cards[0]
            delete_button = await card.querySelector('button.delete-button')

            await asyncio.gather(
                page.waitForNavigation(),
                delete_button.click(),
            )

            await self.check_cards_in_the_page(page, 1)

            cards = await page.querySelectorAll('div.card')
            card = cards[0]
            delete_button = await card.querySelector('button.delete-button')

            await asyncio.gather(
                page.waitForNavigation(),
                delete_button.click(),
            )

            await self.check_cards_in_the_page(page, 0)

        @dynamic_test(order=7)
        def test_delete_card(self):
            asyncio.new_event_loop().run_until_complete(self.test_delete_card_async())
            return CheckResult.correct()


    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: web/static/style.css
  visible: true
  text: ".cards {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fill, minmax(25%,\
    \ 1fr));\n\tgrid-gap: 1vw;\n\tgrid-auto-rows: 30vw;\n\tpadding-left: 20%;\n\t\
    padding-right: 20%;\n\tmargin-bottom: 2vw;\n\tjustify-content: center;\n}\n\n\
    .card {\n\tpadding: 0;\n\tborder: none;\n\tbox-shadow: 0 0 1vw rgba(0,0,0,0.5);\n\
    \tbackground-size: cover;\n\tborder-radius: 0.5vw !important;\n\tcolor: white;\n\
    \tfont-weight: 600;\n\ttext-shadow: 0px 0px 1vw rgba(0,0,0,0.7);\n}\n\nhtml, body\
    \ {\n\tmin-height: 100vh;\n\tbackground: linear-gradient(#836273, #373252);\n\t\
    background-repeat: no-repeat;\n\tbackground-attachment: fixed;\n\tpadding: 0;\n\
    \tmargin: 0;\n\tfont-family: 'Open Sans', sans-serif;\n}\n\n.form {\n\tmargin-top:\
    \ 7%;\n\tpadding-left: 10%;\n\tpadding-right: 10%;\n\ttext-align: center;\n\t\
    font-size: 1vw;\n\tmargin-bottom: 3%;\n}\n\ninput {\n\tborder: none;\n\toutline:\
    \ none;\n\theight: 3vw;\n\twidth: 40vw;\n\tpadding-left: 0.5vw;\n\tbox-shadow:\
    \ 0 0 1vw rgba(0,0,0,0.5);\n}\n\n.submit-button {\n\tmargin-left: 1vw;\n\theight:\
    \ 3vw;\n\twidth: 9vw;\n\tborder: none;\n\toutline: none !important;\n\tbackground-color:\
    \ #373252;\n\tcolor: white;\n\tbox-shadow: 0 0 1vw rgba(0,0,0,0.5);\n}\n\n.night\
    \ {\n\tbackground-image: url(\"/static/img/night.jpg\");\n}\n\n.day {\n\tbackground-image:\
    \ url(\"/static/img/day.jpg\");\n}\n\n.evening-morning {\n\tbackground-image:\
    \ url(\"/static/img/evening-morning.jpg\");\n}\n\n.wrapper {\n\tmin-height: 100vh;\n\
    }\n\n.delete-wrapper {\n\ttext-align: right;\n\tfont-size: 1vw;\n\theight: 20%;\n\
    \twidth: 100%;\n\tpadding-right: 0.5vw;\n\tpadding-top: 0.4vw;\n}\n\n.degrees\
    \ {\n\ttext-align: center;\n\tfont-size: 2.5vw;\n\theight: 10%;\n}\n\n.day > .degrees\
    \ {\n\tcolor: black;\n}\n\n.state {\n\ttext-align: center;\n\tfont-size: 1.5vw;\n\
    }\n\n.day > .state {\n\tcolor: black;\n}\n\n.city {\n\ttext-align: center;\n\t\
    height: 70%;\n\tfont-size: 2vw;\n\tdisplay: flex;\n\tjustify-content: center;\n\
    \    align-items: flex-end;\n    padding-bottom: 6%;\n}\n\n.day > .state {\n\t\
    color: black;\n}\n\n.alert {\n\ttext-align: center;\n\twidth: 30vw;\n\tmargin:\
    \ auto;\n\tmargin-bottom: 1vw;\n\tbackground-color: #373252;\n\tcolor: white;\n\
    \tborder: none;\n\tpadding: 0.5vw;\n\tborder-radius: 0.4vw;\n\tmargin-top: -3%;\n\
    }\n\n.celsius {\n\tfont-size: 1.75vw;\n}\n\n.delete-button {\n\tbackground-color:\
    \ transparent;\n\twidth: 1.5vw;\n\theight: 1vw;\n\tmargin: 0;\n\tpadding: 0;\n\
    \tborder: none;\n\tcolor: white;\n}\n\n.day > .delete-wrapper > form > .delete-button\
    \ {\n\tcolor: black !important;\n}\n\n.delete-button:focus, .delete-button:active\
    \ {\n\tborder: none;\n\toutline: none;\n}\n\n::-webkit-scrollbar {\n    width:\
    \ 0.5vw;\n    background:-webkit-linear-gradient(0, blue 50%, white 100%);\n}\n\
    \n::-webkit-scrollbar-track {\n    background: linear-gradient(0deg, #836273 0%,\
    \ #373252 100%);\n}\n\n::-webkit-scrollbar-thumb {\n    background: #888;\n}\n\
    \n::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n\n"
  learner_created: true
- name: web/static/img/evening-morning.jpg
  visible: true
  learner_created: true
- name: web/static/img/night.jpg
  visible: true
  learner_created: true
- name: web/templates/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Weather App</title>
        <link rel="shortcut icon"
              href="https://img.icons8.com/fluent/48/000000/rainy-weather.png" type="image/x-icon"/>
        <link rel="stylesheet"
              href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
              integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
              crossorigin="anonymous"/>
        <link rel="stylesheet"
              href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap"/>
        <link rel="stylesheet"
              href="{{ url_for('static', filename='style.css') }}"/>
    </head>
    <body>
    <div class="form">
        {% with message = get_flashed_messages() %}
        {% if message %}
        <div class="alert alert-primary" role="alert">
            {{message[0]}}
        </div>
        {% endif %}
        {% endwith %}
        <form action="/" method="POST">
            <input type="text" placeholder="Enter a city name" name="city_name" id="input-city">
            <button type="submit" class="submit-button">Add</button>
        </form>
    </div>
    <div class="cards">
        {% if weather is defined %}
            {% for row in weather %}
                <div class="card evening-morning">
                    <div class="delete-wrapper">
                        <form action="#" method="POST">
                            <input type="hidden" name="id" value="">
                            <button class="delete-button" type="submit">&#10006;</button>
                        </form>
                    </div>
                    <div class="degrees"><span>{{ row["degrees"] }}<span class="celsius"> °C</span></span></div>
                    <div class="state">{{ row["state"] }}</div>
                    <div class="empty"></div>
                    <div class="city">{{ row["city"] }}</div>
                </div>
            {% endfor %}
        {% endif %}
    </div>
    </body>
    </html>
  learner_created: true
- name: web/static/img/day.jpg
  visible: true
  learner_created: true
- name: weather.db
  visible: true
  learner_created: true
- name: web/app.py
  visible: true
  text: |
    from flask import Flask
    import sys

    app = Flask(__name__)

    # don't change the following way to run flask:
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            arg_host, arg_port = sys.argv[1].split(':')
            app.run(host=arg_host, port=arg_port)
        else:
            app.run()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/12329#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Sun, 06 Nov 2022 01:43:16 UTC"
record: -1
